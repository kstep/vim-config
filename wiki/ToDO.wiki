
В отличие от императивного стиля, описывающего шаги, ведущие к достижению цели, функциональный стиль описывает математические отношения между данными и целью.

* Нет состояния
    * Монады
    * Нет глобальных переменных
    * Нет свободных переменных
    * Часто нет переменных вообще,
        * либо есть только локальные в пределах явно заданного блока,
        * они как правило константны по природе
* Вместо присваивания передача параметров из функции в функцию
    * Нельзя изменять данные, можно порождать новые через копирование с преобразованием
        * Необходим хороший сборщик мусора
* Чистые функции первого рода
    * Функции высшего порядка
    * Мемоизация
    * Композиция функций
    * Лямбда-исчисление
    * Карринг
    * Рекурсия вместо циклов
    * Взаимная рекурсия
    * Хвостовая рекурсия
* Описание отношений между объектами, а не алгоритма преобразования объектов
    * Декларативный стиль
* Порядок вычислений строго не задан
    * Параллельные вычисления
    * Thread-safe
* Ленивые вычисления
    * Аргументы функции могут вычисляться не в момент вызова функции, а в момент обращения функции к своим аргументам
    * Списковые и потоковые операции
        * List comprehension (дополнение списков)
        * Map-filter-reduce
* Чистые функции + отсутствие состояния → высокая модульность
    * Простота компиляции и большие возможности для оптимизации
* Примеры языков
    * Lisp & Co
        * Scheme
    * Haskell
        Чистый ФЯ
    * Erlang
        Прозрачные распределённые вычисления
    * XQuery
        XML+JS-подобный
    * Nemerle
        Гибрид с ИП
    * Итд

