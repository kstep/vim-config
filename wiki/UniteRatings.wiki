= Реализация рейтингов =

Рейтинги реализуются в виде отдельного модуля, общающегося с остальной системой через RabbitMQ/AMPQ/UniteAPI.

Внутренняя логика вычисления рейтингов полностью инкапсулирована в модуле, он ведёт свою собственную базу рейтингов (sqlite?).

== Хранилище данных ==

Данные, хранимые в базе:

    * для каждого рейтингуемого объекта запись:
    {{{#!python
(object_type, object_id, cur_rating, new_rating)
    }}}
    где
        * '''object_type, object_id''' — тип и id объекта, однозначное определяющие рейтингуемый объект,
        * '''cur_rating, new_rating''' — последний статически вычисленный рейтинг и новый вычисляемый,
    * таблица с настройками весов событий с записями на каждый тип события:
    {{{#!python
(event_type, object_type, weight, static)
    }}}
    где:
        * '''event_type''' — тип события,
        * '''object_type''' — тип объекта, для которого это событие имеет смысл,
        * '''weight''' — вес события, число с плавающей точкой,
        * '''static''' — булев флаг, является ли события статическим, если да, то '''event_type''' по сути имя поля рейтингуемого объекта со требуемыми статистическими данными.
    * таблица с общими настройками, где хранится время последнего пересчёта рейтингов.

На данный момент пересчёт рейтингов идёт глобально для всех, поэтому хранится только 1 дата последнего пересчёта, если понадобится частичный пересчёт рейтингов, то возможно придётся добавить поле последнего пересчёта для каждого рейтингуемого объекта.

== Логика обработки событий ==

Модуль принимает события в виде:
{{{#!python
(object_type, object_id, event_type, count)
}}}
где

    * '''object_type, object_id''' — пара, однозначно определяющая рейтингуемый объект,
    * '''event_type''' — тип произошедшего события, должен присутствовать в таблице событий/коэффициентов,
    * '''count''' — коэффициент, указывающий кратность события (сколько раз оно произошло), опционально, по-умолчанию 1, должно быть целое число > 0.

По итогу события происходит пересчёт '''new_rating''' для данного объекта:

{{{#!python
object_ = RatingObject.get(ev.object_type, ev.object_id)
event_ = RatingEvent.get(ev.event_type)
object_.new_rating += ev.count * event_.weight
object_.save()
}}}

== API модуля ==

`[C->S]` — запрос к модулю, `[C<-S]` — запрос от модуля.

    1. `[C->S]` Обновить рейтинг: происходит по событию, см. [[/Логика обработки событий]].
    2. `[C->S]` Получить рейтинг объектов ('''read''').
       Вход:
        * [(object_type, object_id), ...],
       Выход:
        * {(object_type, object_id): (cur_rating, new_rating), ...}
    3. `[C->S]` Пересчитать рейтинг ('''recalc''').
       Вход:
        * void,
       Выход:
        * void.
    4. `[C<-S]` Получить статистику о рейтингуемых объектах ('''status''').
       Вход:
        * {(object_type, object_id): [field, ...], ...}
       Выход:
        * {(object_type, object_id): {field: value, ...}, ...}

=== Получить рейтинг объектов (read) ===

На входе модуль получает список кортежей, описывающих объекты, рейтинги которых нужно узнать, на выходе возвращает словарь, где ключами являются кортежи, описывающие требуемые объекты, а значениями — кортежи из двух чисел с плавающей точкой: текущий рейтинг ('''cur_rating''') и вычисляемый рейтинг ('''new_rating''').

=== Пересчитать рейтинг (recalc) ===

Модуль получает специальный сигнал, по которому он начинает глобальный пересчёт рейтингов. В процессе пересчёта рейтингов он может делать запросы к другим модулям для получения статистики по рейтингуемым объектам (см. ниже). После вычисления нового рейтинга, '''new_rating''' для всех объектов переходит в поле '''cur_rating''', а в '''new_rating''' кладётся новое вычисленное на основе статистических данных начальное значение.

Псевдокод:

{{{#!python
objects = RatingObject.query().all()
for object_ in objects:
    object_.cur_rating = object_.new_rating
    events = EventType.query().filter_by(static=True, object_type=object_.object_type).all()
    object_stats = unite_api.query('unite_core', 'status', {(object_.object_type, object_.object_id): [events]})
    
    object_.new_rating = 0
    for field in object_stats:
        object_.new_rating += EventType.get_weight_by_type(field) * object_stats[field]

    object_.save()
GlobalConfig.update(last_recalc=time.time()).execute()
}}}

=== Получить статистические данные об объектах (status) ===

Модуль посылает запрос к интерфейсной части ядра юнайта (броадкастинговый запрос ко всем модулям?) с запросом о новой статистике по рейтингуемым объектам в виде словаря, где ключами являются кортежи из типа объекта и его id, а значениями — список статистических полей (событий с точки зрения модуля), которые модуль интересуют. В ответ от ждёт словарь с ключами в виде кортежей из типа объекта и его id, а значениями в виде словаря с ключами — именами запрашиваемых полей/событий и значениями — целыми числами (с плавающей точкой?).


