
    * AclOpPermagroups
    * КрасныеЛинии
    * AclOpArticle


<pre>
[Thu Mar 17 10:09:42 2011] [error] UPDATE blogs SET id=%(id)s, owner_id=%(owner_id)s, owner_type=%(owner_type)s, create_date=%(create_date)s, update_date=%(update_date)s, title=%(title)s, description=%(description)s, author_id=%(author_id)s, editor_id=%(editor_id)s, posts_count=%(posts_count)s WHERE blogs.id = %(blogs_id)s

[Thu Mar 17 10:09:42 2011] [error] [UOWTask(0xba41d88cL) Mapper: '<Mapper at 0xb99f9c2c; Profile>', UOWTask(0xba41d7ccL) Mapper: '<Mapper at 0xb9a133ac; ProfileGroup>', UOWTask(0xba41ddecL) Mapper: '<Mapper at 0xb9c3870c; AclRecord>', UOWTask(0xba41d74cL) Mapper: '<sqlalchemy.orm.dependency.MapperStub object at 0xba48d16c>']

>>>>> [Thu Mar 17 10:09:42 2011] [error] UPDATE blogs_vs_pgroups SET id=%(id)s, object_id=%(object_id)s, group_id=%(group_id)s, profiles_id=%(profiles_id)s, type=%(type)s, e_mask=%(e_mask)s, u_mask=%(u_mask)s WHERE blogs_vs_pgroups.id = %(blogs_vs_pgroups_id)s

[Thu Mar 17 10:09:42 2011] [error] [UOWTask(0xba41d5ccL) Mapper: '<Mapper at 0xb99f9c2c; Profile>', UOWTask(0xba41dfecL) Mapper: '<Mapper at 0xb9a133ac; ProfileGroup>', UOWTask(0xba41726cL) Mapper: '<Mapper at 0xb9c3870c; AclRecord>', UOWTask(0xba41d46cL) Mapper: '<sqlalchemy.orm.dependency.MapperStub object at 0xba48d16c>']

>>>>> [Thu Mar 17 10:09:42 2011] [error] UPDATE blogs_vs_pgroups SET id=%(id)s, object_id=%(object_id)s, group_id=%(group_id)s, profiles_id=%(profiles_id)s, type=%(type)s, e_mask=%(e_mask)s, u_mask=%(u_mask)s WHERE blogs_vs_pgroups.id = %(blogs_vs_pgroups_id)s
[Thu Mar 17 10:09:42 2011] [error] [client 127.0.0.1] mod_wsgi (pid=11135): Exception occurred processing WSGI script '/home/kstep/projects/work/unite/www/unite.wsgi'.
</pre>

    * WeLinux
    * WeLinuxLua2
    * WeLinuxLua3
    * WelinuxLua4
    
    * WelinuxLua5
    * WelinuxLua6

var f = new F();

alert(f instanceof F);
alert(f())


var F;
F = function () {
    var f = function (arg, func) {
        return function () {
            return func.apply(arg);
        };
    }(this, function () {
        return this;    
    });
    f.__proto__ = F.prototype;
    return f
};

'...' imported but unused
undefined name '...'
'...' is assigned but never used


    * NewACL


    * UniteInstallation
    * ТестыACL
    * AclSelector

{{{
#!javascript
{
    groups: [ group1, group2, ... ],
    users: [ user1, user2, ... ]
}
}}}



    * группа 1 => все подгруппы 1,
    * группа 0 => хоть одна подгруппа 1, то группа 2, иначе группа 0

{{{
#!code javascript
(function(){
  var cache = {};
 
  this.tmpl = function tmpl(str, data){
    // Figure out if we're getting a template, or if we need to
    // load the template - and be sure to cache the result.
    var fn = !/\W/.test(str) ?
      cache[str] = cache[str] ||
        tmpl(document.getElementById(str).innerHTML) :
     
      // Generate a reusable function that will serve as a template
      // generator (and which will be cached).
      new Function("obj",
        "var p=[],print=function(){p.push.apply(p,arguments);};" +
       
        // Introduce the data as local variables using with(){}
        "with(obj){p.push('" +
       
        // Convert the template into pure JavaScript
        str
          .replace(/[\r\t\n]/g, " ")
          .split("<%").join("\t")
          .replace(/((^|%>)[^\t]*)'/g, "$1\r")
          .replace(/\t=(.*?)%>/g, "',$1,'")
          .split("\t").join("');")
          .split("%>").join("p.push('")
          .split("\r").join("\\'")
      + "');}return p.join('');");
   
    // Provide some basic currying to the user
    return data ? fn( data ) : fn;
  };
})(); 
}}}

{{{
#!code javascript
{
    "current": 0,
    "extended": -2,
    "users": [],
    "groups": [
    {"chosen": true, "subgroups": null, "id": 0, "name": "\u0412\u0441\u0435"},
    {"chosen": true, "subgroups": null, "id": -1, "name": "\u0412\u0441\u0435 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435"},
    {"chosen": true, "subgroups": null, "id": 10, "name": "\u041a\u043e\u043d\u0442\u0430\u043a\u0442\u044b"},
    {"chosen": true, "subgroups": null, "id": 12, "name": "\u0414\u0440\u0443\u0437\u044c\u044f"},
    {"chosen": true, "subgroups": null, "id": 9, "name": "\u0411\u043b\u0438\u0437\u043a\u0438\u0435 \u0434\u0440\u0443\u0437\u044c\u044f"}],

    "metagroups": [
    [
    {"id": 0, "name": "\u0412\u0441\u0435"},
    {"id": -1, "name": "\u0412\u0441\u0435 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435"},
    {"id": -2, "name": "\u0412\u044b\u0431\u0440\u0430\u0442\u044c"}
    ],
    [
    {"id": -255, "name": "\u0422\u043e\u043b\u044c\u043a\u043e \u044f"}
    ]
    ]
}



{
    current: 1,
    extended: 2,
    metagroups: [
        [
            { id: x, name: y },
            ...,
        ],
        [
            { id: x, name: y },
            ...
        ]
    ],
    groups: null | [
        { id: x, name: y, chosen: z, subgroups: null | [
            { id: x, name: y, chosen: z },
            ...
        ] },
        ...
    ],
    users: null | [
        { id: x, name: y },
        ...
    ]
}

}}}



    * если есть A-F, то точно 16
    * если есть >7, то либо 10, либо 16
    * если есть >1, то либо 8, либо 10, либо 16
    * если есть только 0 и 1, то может быть любой (2, 8, 10, 16)

Если подпадает под условие, то либо стандартной установленной базы,
либо минимальной допустимой для условия.

Явное задание базы через начало на 0+база:

    * 0A => 16,
    * 08 => 8,
    * 02 => 2.

Это приемлемо, т.к. цифра после 0, являясь базой для системы счисления,
не может входить в само число. Исключение для 16, т.к. системы с большим
основанием не поддерживаются, соотв-но нельзя выразить число 16 одним символом.

{{{
#!code python
class PDUMessage(object):

    def __init__(self, number, message):
	self.__number = number
	self.__message = message

	self.__pdu_number = self.to_semi_octets(number)
	self.__pdu_message = self.to_octets(message)
    
    @staticmethod
    def to_semi_octets(value):
	return [ (int(value[i]) & 0xff) | ((int(value[i+1]) & 0xff) << 4) for i in range(0, len(value), 2) ]
    
    @staticmethod
    def to_octets(value):
	result = []


}}}


{{{
#!code python

class signal(object):
    __subscribers = []
    __method = None

    def __init__(self, method):
        self.__method = method

    def __call__(self, *args, **kw):
        for s in self.__subscribers:
            s(*args, **kw)
        self.__method(*args, **kw)

    def connect(self, subscriber):
        self.__subscribers.append(subscriber)
        return subscriber

class Acl(object):
    @classmethod
    @signal
    def updated(self, sender, emask, umask):
        pass
    updated = signal(updated)
    
    def grant:
        self.updated(emask, umask)




class HitrayaModel(OwnedModel):

    @Acl.updated.connect
    def handle_acl(self, sender, emask, umask):
        self.select....


class Contrl:
    def act:
        obj.grant()
}}}

    * 

{{{
#!sql
explain SELECT communities.id AS id, communities.owner_type AS owner_type, communities.create_date AS create_date, communities.update_date AS update_date, communities.rating AS rating, communities.title AS title, communities.descr AS descr, communities.cat_id AS cat_id, communities.subcat_id AS subcat_id, communities.owner_id AS owner_id, communities.perm_join AS perm_join, communities.state AS state, communities.masters_id AS masters_id FROM communities,communities_vs_pgroups WHERE communities.id = communities_vs_pgroups.object_id and (communities_vs_pgroups.group_id IN (166, 91, -1, 82, 101, 51, 61, 26, 21, 193, 56, 94, 161, 0) AND ((communities_vs_pgroups.mask & 4) != 0)) OR communities.owner_id = 3 AND communities.owner_type = 0


}}}


{{{
#!sql

SELECT count(E'*') AS count_1 
	FROM (SELECT DISTINCT blog_entries.id AS id, blog_entries.owner_id AS owner_id, blog_entries.owner_type AS owner_type, blog_entries.create_date AS create_date, blog_entries.update_date AS update_date, blog_entries.moderate_status AS moderate_status, blog_entries.comments_count AS comments_count, blog_entries.views_count AS views_count, blog_entries.votes_sum AS votes_sum, blog_entries.votes_count AS votes_count, blog_entries.title AS title, blog_entries.content AS content, blog_entries.blog_id AS blog_id, blog_entries.author_id AS author_id, blog_entries.editor_id AS editor_id, blog_entries.comments_total AS comments_total 
	FROM blog_entries, blogs, communities 
	WHERE blog_entries.blog_id IN (SELECT blogs.id 
	FROM blogs LEFT OUTER JOIN blogs_vs_pgroups ON blogs.id = blogs_vs_pgroups.object_id 
	WHERE (blogs.author_id = 22228 OR blogs.id IN (SELECT blogs_vs_pgroups.object_id 
	FROM blogs_vs_pgroups LEFT OUTER JOIN profile_groups_by_profile ON (idx(profile_groups_by_profile.profile_groups_id, blogs_vs_pgroups.group_id) > 0) 
	WHERE (profile_groups_by_profile.profile_id = 22228 OR blogs_vs_pgroups.type IN (99, 100)) AND ((blogs_vs_pgroups.mask & 4) != 0)) OR blogs.owner_id = 22228 AND blogs.owner_type = 0) AND (blogs.owner_type = 0 OR blogs.owner_type = 1 AND blogs.owner_id = communities.id AND (communities.id IN (SELECT communities_vs_pgroups.object_id 
	FROM communities_vs_pgroups LEFT OUTER JOIN profile_groups_by_profile ON (idx(profile_groups_by_profile.profile_groups_id, communities_vs_pgroups.group_id) > 0) 
	WHERE (profile_groups_by_profile.profile_id = 22228 OR communities_vs_pgroups.type IN (99, 100)) AND ((communities_vs_pgroups.mask & 65536) != 0)) OR communities.owner_id = 22228 AND communities.owner_type = 0))) AND blog_entries.blog_id = blogs.id AND (blog_entries.author_id = 22228 OR blog_entries.id IN (SELECT blog_entries_vs_pgroups.object_id 
	FROM blog_entries_vs_pgroups LEFT OUTER JOIN profile_groups_by_profile ON (idx(profile_groups_by_profile.profile_groups_id, blog_entries_vs_pgroups.group_id) > 0) 
	WHERE (profile_groups_by_profile.profile_id = 22228 OR blog_entries_vs_pgroups.type IN (99, 100)) AND ((blog_entries_vs_pgroups.mask & 4) != 0)) OR blog_entries.owner_id = 22228 AND blog_entries.owner_type = 0) AND (blogs.author_id = 22228 OR blogs.id IN (SELECT blogs_vs_pgroups.object_id 
	FROM blogs_vs_pgroups LEFT OUTER JOIN profile_groups_by_profile ON (idx(profile_groups_by_profile.profile_groups_id, blogs_vs_pgroups.group_id) > 0) 
	WHERE (profile_groups_by_profile.profile_id = 22228 OR blogs_vs_pgroups.type IN (99, 100)) AND ((blogs_vs_pgroups.mask & 4) != 0)) OR blogs.owner_id = 22228 AND blogs.owner_type = 0) AND (blogs.owner_type = 0 OR blogs.owner_type = 1 AND blogs.owner_id = communities.id AND (communities.id IN (SELECT communities_vs_pgroups.object_id 
	FROM communities_vs_pgroups LEFT OUTER JOIN profile_groups_by_profile ON (idx(profile_groups_by_profile.profile_groups_id, communities_vs_pgroups.group_id) > 0) 
	WHERE (profile_groups_by_profile.profile_id = 22228 OR communities_vs_pgroups.type IN (99, 100)) AND ((communities_vs_pgroups.mask & 65536) != 0)) OR communities.owner_id = 22228 AND communities.owner_type = 0)) AND (blog_entries.moderate_status != 1 OR blog_entries.author_id = 22228 OR blog_entries.owner_type = 1 AND blog_entries.owner_id IN (SELECT communities.id 
	FROM profile_groups, profile_groups_vs_profiles, communities LEFT OUTER JOIN communities_vs_pgroups ON communities.id = communities_vs_pgroups.object_id 
	WHERE profile_groups.owner_type = 1 AND profile_groups.owner_id = communities.id AND profile_groups.type IN (61, 60) AND profile_groups.id = profile_groups_vs_profiles.profile_group_id AND profile_groups_vs_profiles.profile_id = 22228)) ORDER BY blog_entries.create_date DESC) AS anon_1

explain SELECT DISTINCT blog_entries.id AS blog_entries_id
     , blog_entries.owner_id AS blog_entries_owner_id
     , blog_entries.owner_type AS blog_entries_owner_type
     , blog_entries.create_date AS blog_entries_create_date
     , blog_entries.update_date AS blog_entries_update_date
     , blog_entries.moderate_status AS blog_entries_moderate_status
     , blog_entries.comments_count AS blog_entries_comments_count
     , blog_entries.views_count AS blog_entries_views_count
     , blog_entries.votes_sum AS blog_entries_votes_sum
     , blog_entries.votes_count AS blog_entries_votes_count
     , blog_entries.title AS blog_entries_title
     , blog_entries.content AS blog_entries_content
     , blog_entries.blog_id AS blog_entries_blog_id
     , blog_entries.author_id AS blog_entries_author_id
     , blog_entries.editor_id AS blog_entries_editor_id
     , blog_entries.comments_total AS blog_entries_comments_total
  FROM blog_entries
     , blogs
     , communities
 WHERE blog_entries.blog_id IN (
        SELECT blogs.id
          FROM blogs
          LEFT OUTER JOIN blogs_vs_pgroups
            ON blogs.id         =  blogs_vs_pgroups.object_id
         WHERE (blogs.author_id =  22228
            OR blogs.id IN (
                SELECT blogs_vs_pgroups.object_id
                  FROM blogs_vs_pgroups
                  LEFT OUTER JOIN profile_groups_by_profile
                    ON (idx(profile_groups_by_profile.profile_groups_id, blogs_vs_pgroups.group_id) >  0)
                 WHERE (profile_groups_by_profile.profile_id =  22228
                    OR blogs_vs_pgroups.type IN (99, 100))
           AND ((blogs_vs_pgroups.mask & 4) != 0))
            OR blogs.owner_id   =  22228
           AND blogs.owner_type =  0)
           AND (blogs.owner_type =  0
            OR blogs.owner_type = 1
           AND blogs.owner_id   = communities.id
           AND (communities.id IN (
                SELECT communities_vs_pgroups.object_id
                  FROM communities_vs_pgroups
                  LEFT OUTER JOIN profile_groups_by_profile
                    ON (idx(profile_groups_by_profile.profile_groups_id, communities_vs_pgroups.group_id) > 0)
                 WHERE (profile_groups_by_profile.profile_id =  22228
                    OR communities_vs_pgroups.type IN (99, 100))
           AND ((communities_vs_pgroups.mask & 65536) != 0))
            OR communities.owner_id =  22228
   AND communities.owner_type  =  0)))
   AND blog_entries.blog_id    =  blogs.id
   AND (blog_entries.author_id =  22228
    OR blog_entries.id IN (
        SELECT blog_entries_vs_pgroups.object_id
          FROM blog_entries_vs_pgroups
          LEFT OUTER JOIN profile_groups_by_profile
            ON (idx(profile_groups_by_profile.profile_groups_id, blog_entries_vs_pgroups.group_id) >  0)
         WHERE (profile_groups_by_profile.profile_id = 22228
            OR blog_entries_vs_pgroups.type IN (99, 100))
   AND ((blog_entries_vs_pgroups.mask & 4) != 0))
    OR blog_entries.owner_id    =  22228
   AND blog_entries.owner_type  =  0)
   AND (blogs.author_id         =  22228
    OR blogs.id IN (
        SELECT blogs_vs_pgroups.object_id
          FROM blogs_vs_pgroups
          LEFT OUTER JOIN profile_groups_by_profile
            ON (idx(profile_groups_by_profile.profile_groups_id, blogs_vs_pgroups.group_id) >  0)
         WHERE (profile_groups_by_profile.profile_id =  22228
            OR blogs_vs_pgroups.type IN (99, 100))
   AND ((blogs_vs_pgroups.mask & 4) != 0))
    OR blogs.owner_id    = 22228
   AND blogs.owner_type  = 0)
   AND (blogs.owner_type = 0
    OR blogs.owner_type  = 1
   AND blogs.owner_id    = communities.id
   AND (communities.id IN (
        SELECT communities_vs_pgroups.object_id
          FROM communities_vs_pgroups
          LEFT OUTER JOIN profile_groups_by_profile
            ON (idx(profile_groups_by_profile.profile_groups_id, communities_vs_pgroups.group_id) > 0)
         WHERE (profile_groups_by_profile.profile_id = 22228
            OR communities_vs_pgroups.type IN (99, 100))
   AND ((communities_vs_pgroups.mask & 65536) != 0))
    OR communities.owner_id   =  22228
   AND communities.owner_type =  0))
   AND (blog_entries.moderate_status != 1
    OR blog_entries.author_id  =  22228
    OR blog_entries.owner_type =  1
   AND blog_entries.owner_id IN (
        SELECT communities.id
          FROM profile_groups
             , profile_groups_vs_profiles
             , communities
          LEFT OUTER JOIN communities_vs_pgroups
            ON communities.id                         = communities_vs_pgroups.object_id
            WHERE profile_groups.owner_type           = 1
            AND profile_groups.owner_id               = communities.id
            AND profile_groups.type IN (61, 60)
            AND profile_groups.id                     = profile_groups_vs_profiles.profile_group_id
            AND profile_groups_vs_profiles.profile_id = 22228))
 ORDER BY blog_entries.create_date DESC LIMIT 20 OFFSET 0;

}}}
{{{
#!python


class Cls(Base):

    

{'pylons.routes_dict': {'action': u'document', 'controller': u'error'},
'SERVER_PROTOCOL': 'HTTP/1.0', 'SCRIPT_NAME': '', 'pylons.original_request':
<Request at 0x9a2924c GET
http://dev.unite.com/oauth/login?oauth_token=7icP1bLsweMY9UweE2VniJPuaWTvVi7LzIaooQmXe8&oauth_verifier=9TTzwnCoJ0iMI4lk1NFx7eZkDm6hfvscKS329wWs>,
'webob.adhoc_attrs': {'language': 'en-us'}, 'REQUEST_METHOD': 'GET',
'PATH_INFO': '/error/document', 'beaker.get_session': <bound method
SessionMiddleware._get_session of <beaker.middleware.SessionMiddleware object
at 0x951474c>>, 'QUERY_STRING':
'oauth_token=7icP1bLsweMY9UweE2VniJPuaWTvVi7LzIaooQmXe8&oauth_verifier=9TTzwnCoJ0iMI4lk1NFx7eZkDm6hfvscKS329wWs',
'paste.throw_errors': True, 'HTTP_X_REAL_IP': '93.84.120.101',
'pylons.action_method': <bound method ErrorController.document of
<unite.controllers.error.ErrorController object at 0x99fadcc>>,
'CONTENT_LENGTH': '0', 'HTTP_ACCEPT_CHARSET':
'windows-1251,utf-8;q=0.7,*;q=0.7', 'HTTP_USER_AGENT': 'Mozilla/5.0 (X11; U;
Linux i686; ru; rv:1.9.2.8) Gecko/20100722 Firefox/3.6.8', 'HTTP_CONNECTION':
'close', 'beaker.cache': <beaker.cache.CacheManager object at 0x95314cc>,
'SERVER_NAME': '0.0.0.0', 'routes.route': <routes.route.Route object at
0x92973cc>, 'pylons.environ_config': {'session': 'beaker.session', 'cache':
'beaker.cache'}, 'pylons.pylons': <pylons.util.PylonsContext object at
0x95a0b2c>, 'wsgi.url_scheme': 'http', 'wsgiorg.routing_args':
(<routes.util.URLGenerator object at 0x953b10c>, {'action': u'document',
'controller': u'error'}), 'SERVER_PORT': '8001', 'webob._parsed_query_vars':
(GET([('oauth_token', '7icP1bLsweMY9UweE2VniJPuaWTvVi7LzIaooQmXe8'),
('oauth_verifier', '9TTzwnCoJ0iMI4lk1NFx7eZkDm6hfvscKS329wWs')]),
'oauth_token=7icP1bLsweMY9UweE2VniJPuaWTvVi7LzIaooQmXe8&oauth_verifier=9TTzwnCoJ0iMI4lk1NFx7eZkDm6hfvscKS329wWs'),
'weberror.evalexception': <weberror.evalexception.EvalException object at
0x95314ec>, 'pylons.controller': <unite.controllers.error.ErrorController
object at 0x99fadcc>, 'paste.evalexception':
<weberror.evalexception.EvalException object at 0x95314ec>, 'wsgi.input':
<socket._fileobject object at 0x99416f4 length=0>, 'HTTP_HOST':
'dev.unite.com', 'beaker.session': {'lang': 'ru', 'oauth_service': 17,
'user_tz': pytz.FixedOffset(120), 'auth_service': u'Twitter', 'tz_offset':
-120, 's': 'unite', '_accessed_time': 1289472614.0818191, '_creation_time':
1289470877.21522}, 'wsgi.multithread': True, 'routes.url':
<routes.util.URLGenerator object at 0x953b10c>, 'HTTP_ACCEPT':
'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
'wsgi.version': (1, 0), 'paste.registry': <paste.registry.Registry object at
0x9a6504c>, 'wsgi.run_once': False, 'wsgi.errors': <open file '<stderr>', mode
'w' at 0xb7d4d0b0>, 'REMOTE_ADDR': '127.0.0.1', 'HTTP_ACCEPT_LANGUAGE':
'ru,en-us;q=0.7,en;q=0.3', 'HTTP_X_FORWARDED_FOR': '93.84.120.101',
'CONTENT_TYPE': '', 'paste.httpserver.thread_pool':
<paste.httpserver.ThreadPool object at 0x828df0c>, 'HTTP_ACCEPT_ENCODING':
'gzip,deflate'}
}}}

=== Проекты ===

    * DvkByЗадачи

=== Разное ===

    * FictionBookFormat
    * Water202Form


    * PublicStatic

    * DbusCron
    * TmpX
    * ПочтаНаUniteTest

    * UniteACL

    * ЗаявлениеНаЗагранпаспорт

    * UniteСпекаПоФидам
    * UniteVotings
    * UniteRatings

    * UniteOAuthUserManual

    * БольшаяВики

    * ПланыИПроекты

    * ИдеиПоUnite
    * РасширениеДиалектаPostgreSQL
    * OpenAuth
    * PythonMigrate

    * GitGraphPlugin
    * GitGraphStatusView
    * GitGraphPlans

    * TodoList
    * OptimizationTasks
    * СервисыOpenID

    * GitSync

    * СтоимостьДомашнегоФайлСервера

    * ISCEmailOrderNotify

    * ТребованияКСистемеТаймМенеджмента
    * ТребованияКФайлМенеджеру

    * УютненькийБложег
    * СмыслМонад

    * FusqlFS
    * PurpleFS
    * IgetBy

    * ГурьевскаяКаша

= Текущие задачи =

рекомендательный механизм

интересы у юзера и сообщ-ва
=> рекомендуем общества, у к-х интересы пересекаются с интерсеами юзера, но он не в них
=> рекомендация юзеров юзеру по тегам,
=> рекомендация организовать сообщ-ва юзерам с общими тегами.

загрузка аватарки вместо дефолтной

контент

======
22:30
01:00
итого 2.5 часа

=====
ключевые слова альфата.бай:

теплообменник Альфа Лаваль Alfa Laval пластинчатый теплообменник расчет теплообменника водоподогреватель ГВС теплообменное энергосберегающее котельное оборудование отопление теплообмен ЦТП ИТП паро-водяной водо-водяной

Формат ссылки на список пакетов в репе:
[Первая колонка]------------------------------------------[Вторая колонка]-----[Третья и далее]--------------------------------------------
[базовый урл репа: http://dl.google.com/linux/deb/] dists/[версия оси: stable]/[имя репа: main]/[архитектура репа: binary-i386]/Packages.gz

=====

дано: id профиля
нужно подсчитать *количество* профилей, связанных с такими же тегами, что и данный профиль.
То есть нет нужды опрашивать таблицу профилей, достаточно опросить таблицу-связку profiles_vs_tags.

{{{
#!sql
select count(pt2.tag_id) from profiles_vs_tags as pt1 join profiles_vs_tags as pt2 on pt1.tag_id = pt2.tag_id where pt1.object_id = :id: and pt2.object_id <> :id: order by count(pt2.tag_id) desc limit 10
}}}

теперь отсюда надо исключить те теги, которые уже есть в таблице communities_vs_tags:

{{{
#!sql
select distinct ct.tag_id from communities_vs_tags as ct
}}}

{{{
#!sql
select count(pt2.tag_id) from profiles_vs_tags as pt1 join profiles_vs_tags as pt2 on pt1.tag_id = pt2.tag_id where pt1.object_id = :id: and pt2.object_id <> :id: and pt2.tag_id not in (select distinct ct.tag_id from communities_vs_tags as ct) group by pt2.tag_id order by count(pt2.tag_id) desc limit 10
}}}

теперь нам нужны собственно имена тегов, а не только количество:

{{{
#!sql
explain select t.name, count(pt2.tag_id) from profiles_vs_tags as pt1 join profiles_vs_tags as pt2 on pt1.tag_id = pt2.tag_id join soc_ts_tags as t on t.id = pt2.tag_id where pt1.object_id = 1 and pt2.object_id <> 1 and pt2.tag_id not in (select distinct ct.tag_id from communities_vs_tags as ct) group by t.name, pt2.tag_id order by count(pt2.tag_id) desc limit 10
}}}

вариант отторжения тегов сообществ:

{{{
#!sql
explain select t.name, count(pt2.tag_id) from profiles_vs_tags as pt1 join profiles_vs_tags as pt2 on pt1.tag_id = pt2.tag_id left join communities_vs_tags as ct on ct.tag_id = pt2.tag_id join soc_ts_tags as t on t.id = pt2.tag_id where pt1.object_id = 1 and pt2.object_id <> 1 and ct.tag_id is null group by t.name, pt2.tag_id order by count(pt2.tag_id) desc limit 10
}}}

Судя по explain'у, второй вариант раза в 1.4-1.5 быстрее первого (стоимость 142 против 200 без индексной оптимизации). Судя по быстрым тестам их результаты совпадают и соответствуют ожиданиям.

Вывод: использовать второй запрос (с 3 join'ами и проверкой ct.tag_id is not null, а не с 2 join'ами и одним подзапросом).

Ещё вариант в двумя подзапросами и одним join'ом:

{{{
#!sql
explain select t.name, count(pt2.tag_id) from profiles_vs_tags as pt2 join soc_ts_tags as t on t.id = pt2.tag_id where pt2.object_id <> 1 and pt2.tag_id in (select distinct pt1.tag_id from profiles_vs_tags as pt1 where pt1.object_id = 1) and pt2.tag_id not in (select distinct ct.tag_id from communities_vs_tags as ct) group by t.name, pt2.tag_id order by count(pt2.tag_id) desc limit 10
}}}

Стоимость почти как у первого (примерно 199).

Итого: подзапросы зло. Использовать второй вариант:

{{{
#!sql
select t.name, count(pt2.tag_id) from profiles_vs_tags as pt1 join profiles_vs_tags as pt2 on pt1.tag_id = pt2.tag_id left join communities_vs_tags as ct on ct.tag_id = pt2.tag_id join soc_ts_tags as t on t.id = pt2.tag_id where pt1.object_id = :id and pt2.object_id <> :id and ct.tag_id is null group by t.name, pt2.tag_id order by count(pt2.tag_id) desc limit 10
}}}

{{{
#!sql
SELECT count(profiles_vs_tags_1.tag_id) AS count_1, soc_ts_tags.name 
FROM profiles_vs_tags JOIN profiles_vs_tags AS profiles_vs_tags_1 ON profiles_vs_tags_1.tag_id = profiles_vs_tags.tag_id LEFT OUTER JOIN communities_vs_tags ON communities_vs_tags.tag_id = profiles_vs_tags_1.tag_id JOIN soc_ts_tags ON soc_ts_tags.id = profiles_vs_tags_1.tag_id 
WHERE profiles_vs_tags.object_id = :object_id_1 AND profiles_vs_tags_1.object_id != :object_id_2 AND communities_vs_tags.tag_id IS NULL GROUP BY soc_ts_tags.name, profiles_vs_tags_1.tag_id ORDER BY count(profiles_vs_tags_1.tag_id) DESC 
 LIMIT 5
}}}




{{{
#!sql

select * from oauth_vs_users;
select * from openid_vs_users;

}}}





